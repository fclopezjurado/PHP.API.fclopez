{
    "swagger": "2.0",
    "info": {
        "title": "MiW16 Results REST api",
        "description": "[UPM] MiW16 Results REST api operations",
        "license": {
            "name": "MIT",
            "url": "./LICENSE.txt"
        },
        "version": "0.1.0"
    },
    "host": "localhost",
    "basePath": "/PHP.API.fclopez/public/index.php",
    "schemes": [
        "http"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "paths": {
        "/users": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Returns all users",
                "description": "Returns all users from the system that the user has access to.",
                "operationId": "miw_get_all_users",
                "responses": {
                    "200": {
                        "description": "User array response",
                        "schema": {
                            "$ref": "#/definitions/UsersArray"
                        }
                    },
                    "404": {
                        "description": "Users not found",
                        "schema": {
                            "$ref": "#/definitions/usersNotFound"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Creates a new user",
                "description": "Creates a new user",
                "operationId": "miw_create_user",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "`User` properties to add to the system",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UserData"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "`Created` User created",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "`Bad Request` Username or email already exists.",
                        "schema": {
                            "$ref": "#/definitions/userNameOrEmailAlreadyExists"
                        }
                    },
                    "422": {
                        "description": "`Unprocessable entity` Username, e-mail or password is left out",
                        "schema": {
                            "$ref": "#/definitions/userNameOrEmailOrPasswordIsLeftOut"
                        }
                    }
                }
            },
            "options": {
                "tags": [
                    "Users"
                ],
                "summary": "Provides the list of HTTP supported methods",
                "description": "Return a `Allow` header with a list of HTTP supported methods.",
                "operationId": "miw_options_users",
                "responses": {
                    "200": {
                        "description": "`Allow` header &lt;Response body is empty&gt;"
                    }
                }
            }
        },
        "/users/{userId}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Returns a user based on a single ID",
                "description": "Returns the user identified by `userId`.",
                "operationId": "miw_get_user_by_id",
                "parameters": [
                    {
                        "$ref": "#/parameters/userId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/userNotFound"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Users"
                ],
                "summary": "Updates a user",
                "description": "Updates the user identified by `userId`.",
                "operationId": "miw_update_user",
                "parameters": [
                    {
                        "$ref": "#/parameters/userId"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "`User` data to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UserData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "`Ok` User previously existed and is now updated",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "`Bad Request` Username or e-mail already exists",
                        "schema": {
                            "$ref": "#/definitions/userNameOrEmailAlreadyExists"
                        }
                    },
                    "404": {
                        "description": "`Not Found` User not found",
                        "schema": {
                            "$ref": "#/definitions/userNotFound"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Users"
                ],
                "summary": "Deletes a user",
                "description": "Deletes the user identified by `userId`.",
                "operationId": "miw_delete_user_by_id",
                "parameters": [
                    {
                        "$ref": "#/parameters/userId"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User deleted &lt;Response body is empty&gt;"
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/userNotFound"
                        }
                    }
                }
            }
        },
        "/results": {
            "get": {
                "tags": [
                    "Results"
                ],
                "summary": "Returns all results",
                "description": "Returns all results from the system that the user has access to.",
                "operationId": "miw_get_all_results",
                "responses": {
                    "200": {
                        "description": "Result array response",
                        "schema": {
                            "$ref": "#/definitions/ResultsArray"
                        }
                    },
                    "404": {
                        "description": "Results not found",
                        "schema": {
                            "$ref": "#/definitions/resultsNotFound"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Results"
                ],
                "summary": "Creates a new result",
                "description": "Creates a new result",
                "operationId": "miw_create_result",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "`Result` properties to add to the system",
                        "required": true,
                        "schema": {
                          "$ref": "#/definitions/ResultData"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "`Created` Result created",
                        "schema": {
                            "$ref": "#/definitions/Result"
                        }
                    },
                    "400": {
                        "description": "`Bad Request` User does not exist.",
                        "schema": {
                            "$ref": "#/definitions/userDoesNotExist"
                        }
                    },
                    "422": {
                        "description": "`Unprocessable entity` User ID or result is left out.",
                        "schema": {
                            "$ref": "#/definitions/userIDOrResultIsLeftOut"
                        }
                    }
                }
            },
            "options": {
                "tags": [
                    "Results"
                ],
                "summary": "Provides the list of HTTP supported methods",
                "description": "Return a `Allow` header with a list of HTTP supported methods.",
                "operationId": "miw_options_results",
                "responses": {
                    "200": {
                        "description": "`Allow` header &lt;Response body is empty&gt;"
                    }
                }
            }
        },
        "/results/{resultId}": {
            "get": {
                "tags": [
                    "Results"
                ],
                "summary": "Returns a result based on a single ID",
                "description": "Returns the result identified by `resultId`.",
                "operationId": "miw_get_result_by_id",
                "parameters": [
                    {
                        "$ref": "#/parameters/resultId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Result",
                        "schema": {
                          "$ref": "#/definitions/Result"
                        }
                    },
                    "404": {
                        "description": "Result not found",
                        "schema": {
                          "$ref": "#/definitions/resultNotFound"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Results"
                ],
                "summary": "Updates a result",
                "description": "Updates the result identified by `resultId`.",
                "operationId": "miw_update_result",
                "parameters": [
                    {
                        "$ref": "#/parameters/resultId"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "`Result` data to update",
                        "required": true,
                        "schema": {
                          "$ref": "#/definitions/ResultData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "`Ok` Result previously existed and is now updated",
                        "schema": {
                            "$ref": "#/definitions/Result"
                        }
                    },
                    "400": {
                      "description": "`Bad Request` User not found.",
                      "schema": {
                        "$ref": "#/definitions/resultUserNotFound"
                      }
                    },
                    "404": {
                        "description": "`Not Found` Result not found",
                        "schema": {
                            "$ref": "#/definitions/resultNotFound"
                        }
                    },
                    "422": {
                        "description": "`Unprocessable entity` Result field is left out",
                        "schema": {
                            "$ref": "#/definitions/resultFieldIsLeftOut"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Results"
                ],
                "summary": "Deletes a result",
                "description": "Deletes the result identified by `resultId`.",
                "operationId": "miw_delete_results",
                "parameters": [
                    {
                        "$ref": "#/parameters/resultId"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Result deleted &lt;Response body is empty&gt;"
                    },
                    "404": {
                        "description": "Result not found",
                        "schema": {
                            "$ref": "#/definitions/resultNotFound"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "User": {
            "required": [
                "id",
                "username",
                "email",
                "password"
            ],
            "properties": {
                "id": {
                    "description": "User Id",
                    "type": "integer",
                    "format": "int32"
                },
                "username": {
                    "description": "User name",
                    "type": "string"
                },
                "email": {
                    "description": "User email",
                    "type": "string"
                },
                "password": {
                    "description": "User password",
                    "type": "string",
                    "format": "password"
                },
                "token": {
                    "description": "API access token",
                    "type": "string"
                },
                "enabled": {
                    "description": "Denotes if user is enabled",
                    "type": "boolean"
                }
            },
            "example": {
                "id": 1508,
                "username": "User name",
                "email": "User email",
                "password": "dfa45d4a6da4d5f4a",
                "enabled": true,
                "token": "$2$6a7f5b9e15f9c4a51495"
            }
        },
        "UserData": {
            "properties": {
                "username": {
                    "description": "User name",
                    "type": "string",
                    "required": true
                },
                "email": {
                    "description": "User email",
                    "type": "string",
                    "required": true
                },
                "password": {
                    "description": "User password",
                    "type": "string",
                    "format": "password",
                    "required": true
                },
                "enabled": {
                    "description": "Denotes if user is enabled",
                    "type": "boolean"
                },
                "token": {
                    "description": "User token",
                    "type": "string"
                }
            },
            "example": {
                "username": "User_name",
                "email": "User_email@example.com",
                "password": "User_password",
                "enabled": true,
                "token": "$2$6a7f5b9e15f9c4a51495"
            }
        },
        "UsersArray": {
            "properties": {
                "users": {
                    "description": "Users array",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/User"
                    }
                }
            }
        },
        "Result": {
            "required": [
                "id",
                "user",
                "result"
            ],
            "properties": {
                "id": {
                    "description": "Result Id",
                    "type": "integer",
                    "format": "int32"
                },
                "user": {
                    "description": "Result User",
                    "type": "#/definitions/User",
                    "format": "int32"
                },
                "result": {
                    "description": "Result",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "example": {
                "id": 1,
                "user": {
                    "id": 1508,
                    "username": "User name",
                    "email": "User email",
                    "enabled": true,
                    "token": "$2$6a7f5b9e15f9c4a51495"
                },
                "result": 8
            }
        },
        "ResultData": {
            "properties": {
                "user_id": {
                    "description": "User ID",
                    "type": "integer",
                    "required": true
                },
                "result": {
                    "description": "Result",
                    "type": "integer",
                    "required": true
                }
            },
          "example": {
              "user_id": 1,
              "result": 8
          }
        },
        "ResultsArray": {
            "properties": {
                "results": {
                    "description": "Results array",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Result"
                    }
                }
            }
        },
        "userNotFound": {
            "required": [
                "code",
                "message"
            ],
            "properties": {
                "code": {
                  "description": "Response code",
                  "type": "integer",
                  "format": "int32"
                },
                "message": {
                  "description": "Response message",
                  "type": "string"
                }
            },
            "example": {
                "code": 404,
                "message": "User not found"
            }
        },
        "usersNotFound": {
            "required": [
                "code",
                "message"
            ],
            "properties": {
                "code": {
                    "description": "Response code",
                    "type": "integer",
                    "format": "int32"
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                }
            },
            "example": {
                "code": 404,
                "message": "Users not found"
            }
        },
        "userNameOrEmailAlreadyExists": {
            "required": [
                "code",
                "message"
            ],
            "properties": {
                "code": {
                  "description": "Response code",
                  "type": "integer",
                  "format": "int32"
                },
                "message": {
                  "description": "Response message",
                  "type": "string"
                }
            },
            "example": {
                "code": 400,
                "message": "Username or email already exists"
            }
        },
        "userNameOrEmailOrPasswordIsLeftOut": {
            "required": [
                "code",
                "message"
            ],
            "properties": {
                "code": {
                  "description": "Response code",
                  "type": "integer",
                  "format": "int32"
                },
                "message": {
                  "description": "Response message",
                  "type": "string"
                }
            },
            "example": {
                "code": 422,
                "message": "Username, e-mail or password is left out"
            }
        },
        "resultNotFound": {
            "required": [
                "code",
                "message"
            ],
            "properties": {
                "code": {
                    "description": "Response code",
                    "type": "integer",
                    "format": "int32"
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                }
            },
            "example": {
              "code": 404,
              "message": "Result not found"
            }
        },
        "resultsNotFound": {
            "required": [
                "code",
                "message"
            ],
            "properties": {
                "code": {
                  "description": "Response code",
                  "type": "integer",
                  "format": "int32"
                },
                "message": {
                  "description": "Response message",
                  "type": "string"
                }
            },
            "example": {
                "code": 404,
                "message": "Results not found"
            }
        },
        "userDoesNotExist": {
            "required": [
                "code",
                "message"
            ],
            "properties": {
                "code": {
                  "description": "Response code",
                  "type": "integer",
                  "format": "int32"
                },
                "message": {
                  "description": "Response message",
                  "type": "string"
                }
            },
            "example": {
                "code": 400,
                "message": "User does not exist"
            }
        },
        "userIDOrResultIsLeftOut": {
            "required": [
                "code",
                "message"
            ],
            "properties": {
                "code": {
                    "description": "Response code",
                    "type": "integer",
                    "format": "int32"
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                }
            },
            "example": {
                "code": 422,
                "message": "User ID or result is left out"
            }
        },
        "resultUserNotFound": {
            "required": [
                "code",
                "message"
            ],
            "properties": {
                "code": {
                  "description": "Response code",
                  "type": "integer",
                  "format": "int32"
                },
                "message": {
                  "description": "Response message",
                  "type": "string"
                }
            },
            "example": {
                "code": 400,
                "message": "User not found"
            }
        },
        "resultFieldIsLeftOut": {
            "required": [
                "code",
                "message"
            ],
            "properties": {
                "code": {
                  "description": "Response code",
                  "type": "integer",
                  "format": "int32"
                },
                "message": {
                  "description": "Response message",
                  "type": "string"
                }
            },
            "example": {
                "code": 422,
                "message": "Result field is left out"
            }
        }
    },
    "parameters": {
        "userId": {
            "name": "userId",
            "in": "path",
            "description": "ID of user to fetch",
            "required": true,
            "type": "integer",
            "format": "int32"
        },
        "resultId": {
            "name": "resultId",
            "in": "path",
            "description": "ID of result to fetch",
            "required": true,
            "type": "integer",
            "format": "int32"
        }
    }
}